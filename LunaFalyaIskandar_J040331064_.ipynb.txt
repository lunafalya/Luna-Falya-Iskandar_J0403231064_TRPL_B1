{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mMDcRqx2kPKi",
        "outputId": "4e3c474e-a984-4c2a-c04e-4f93d509b507"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "One of my favorite desserts is Churros\n",
            "One of my favorite desserts is Tiramisú\n",
            "One of my favorite desserts is Pudding\n"
          ]
        }
      ],
      "source": [
        "favorites = ['Churros', 'Tiramisú', 'Pudding']\n",
        "\n",
        "count = 0\t\t# count is iteration variable\n",
        "\n",
        "while count < len(favorites):\n",
        "    print('One of my favorite desserts is', favorites[count]);\n",
        "    count += 1\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "time = 0\n",
        "population = 1000 # 1000 bacteria to start with\n",
        "growth_rate = 0.21 # 21% growth per minute\n",
        "while population < 2000:\n",
        "    population = population + growth_rate * population\n",
        "    print(round(population))\n",
        "    time = time + 1\n",
        "print(\"It took\", time, \"minutes for the bacteria to double.\")\n",
        "print(\"The final population was\", round(population), \"bacteria.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5fD4nRXrlQRK",
        "outputId": "bf439a7b-cafc-4926-b4db-37c711cc819b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1210\n",
            "1464\n",
            "1772\n",
            "2144\n",
            "It took 4 minutes for the bacteria to double.\n",
            "The final population was 2144 bacteria.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "text = \"\"\n",
        "while text != \"q\":\t\t\t\t\t\t\t\t\t\t# not use while True\n",
        "  text = input(\"Please enter a chemical formula (or 'q' to exit): \")\t# user input\n",
        "  if text == \"q\":\n",
        "    print(\"…exiting program\")\n",
        "    Break\t\t\t\t\t\t\t\t\t\t\t# break\n",
        "  elif text == \"H2O\":\n",
        "    print(\"Water\")\n",
        "  elif text == \"NH3\":\n",
        "    print(\"Ammonia\")\n",
        "  elif text == \"CH4\":\n",
        "    print(\"Methane\")\n",
        "  else:\n",
        "    print(\"Unknown compound\")\n"
      ],
      "metadata": {
        "id": "Y0kAEhWOldc5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7ea893a2-432c-421a-86f3-ea29927239fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please enter a chemical formula (or 'q' to exit): H20\n",
            "Unknown compound\n",
            "Please enter a chemical formula (or 'q' to exit): NH3\n",
            "Ammonia\n",
            "Please enter a chemical formula (or 'q' to exit): H20\n",
            "Unknown compound\n",
            "Please enter a chemical formula (or 'q' to exit): CH4\n",
            "Methane\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "favorites = ['Churros', 'Tiramisú', 'Pudding']\n",
        "\n",
        "for dessert in favorites:\n",
        "    print('One of my favorite desserts is', dessert)\n"
      ],
      "metadata": {
        "id": "444TEQF1nsdI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "country = 'Republik Indonesia'\n",
        "for ch in country:\n",
        "    print(ch, end=' ')\n"
      ],
      "metadata": {
        "id": "wNntDyjJoIR6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "days_of_week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n",
        "\n",
        "for day in days_of_week:\n",
        "    print(day)\n"
      ],
      "metadata": {
        "id": "BvicsbofoPt1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "survey_responses = [\"positive\", \"neutral\", \"positive\", \"negative\", \"positive\", \"positive\", \"neutral\"]\n",
        "\n",
        "positive_count = 0\n",
        "\n",
        "for response in survey_responses:\n",
        "    if response == \"positive\":\n",
        "        positive_count += 1\n",
        "\n",
        "print(f\"Number of positive responses: {positive_count}\")\n"
      ],
      "metadata": {
        "id": "zdkrJPvnoQ5k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sales_transactions = [100.50, 75.25, 50.75, 30.00, 45.50]\n",
        "\n",
        "total_revenue = 0\n",
        "\n",
        "for transaction in sales_transactions:\n",
        "    total_revenue += transaction\n",
        "\n",
        "print(f\"Total revenue: ${total_revenue:.2f}\")\n"
      ],
      "metadata": {
        "id": "S-5qd-_foYjg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "email_addresses = [\"user1@spam.com\", \"user2@gmail.com\", \"user3@spam.com\"]\n",
        "\n",
        "spam_emails = []\n",
        "\n",
        "for email in email_addresses:\n",
        "    if email.endswith(\"@spam.com\"):\n",
        "        spam_emails.append(email)\n",
        "\n",
        "print(\"Spam emails:\")\n",
        "for email in spam_emails:\n",
        "    print(email)\n"
      ],
      "metadata": {
        "id": "oqp7z2VPodNJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "student_names = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n",
        "student_name_to_search = \"Charlie\"\n",
        "\n",
        "student_found = False\n",
        "\n",
        "for name in student_names:\n",
        "    if name == student_name_to_search:\n",
        "        student_found = True\n",
        "        break\n",
        "\n",
        "if student_found:\n",
        "    print(f\"Student {student_name_to_search} found.\")\n",
        "else:\n",
        "    print(f\"Student {student_name_to_search} not found.\")\n"
      ],
      "metadata": {
        "id": "7m1cxytgoeJb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "temperatures = [75, 82, 79, 88, 91, 84, 77]\n",
        "max_temperature = temperatures[0]\n",
        "\n",
        "for temperature in temperatures:\n",
        "    if temperature > max_temperature:\n",
        "        max_temperature = temperature\n",
        "\n",
        "print(f\"The maximum temperature of the week was {max_temperature}°F.\")\n"
      ],
      "metadata": {
        "id": "e9i_qE1Zorjq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "countdown_seconds = 5\n",
        "\n",
        "print(\"Get ready for liftoff!\")\n",
        "for remaining_seconds in range(countdown_seconds, 0, -1):\n",
        "    print(f\"{remaining_seconds}...\")\n",
        "    time.sleep(1)\n",
        "\n",
        "print(\"Blast off!\")\n"
      ],
      "metadata": {
        "id": "2ZfBoM3Yo51R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "days_in_month = 30\n",
        "start_day = 1 #1st day of the month\n",
        "\n",
        "print(\"<< Dummy Calendar >>\")\n",
        "print(\"Mon Tue Wed Thu Fri Sat Sun\")\n",
        "for day in range(1, days_in_month + 1):\n",
        "    print(f\"{day:3d}\", end=\" \")\n",
        "\n",
        "    # new line for next week (Sunday)\n",
        "    if (day + start_day - 1) % 7 == 0:\n",
        "        print()\n"
      ],
      "metadata": {
        "id": "EQQ_ekBwo6r1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "outer = ['Li', 'Na', 'K']\n",
        "inner = ['F', 'Cl', 'Br']\n",
        "for metal in outer:\n",
        "    for halogen in inner:\n",
        "        print(metal + halogen)\n"
      ],
      "metadata": {
        "id": "0K9hNuoUo9sm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "height = 5  # Height of the pyramid\n",
        "\n",
        "for i in range(1, height + 1):\n",
        "    # Print spaces before the stars\n",
        "    for j in range(height - i):\n",
        "        print(\" \", end=\"\")\n",
        "\n",
        "    # Print the stars\n",
        "    for k in range(2 * i - 1):\n",
        "        print(\"*\", end=\"\")\n",
        "\n",
        "    # Move to the next line after each row\n",
        "    print()\n"
      ],
      "metadata": {
        "id": "oaynnautpBez"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "favorites = ['Churros', 'Tiramisú', 'Pudding']\n",
        "\n",
        "for dessert in favorites:\n",
        "    if dessert == 'Pudding':\n",
        "        print('Yes one of my favorite desserts is', dessert)\n",
        "else:\n",
        "    print('No sorry, that dessert is not on my list')\n"
      ],
      "metadata": {
        "id": "KhzOgawnpEVr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "snacks_in_stock = [\"chips\", \"candy\", \"soda\", \"cookies\"]\n",
        "user_choice = \"\"\n",
        "\n",
        "while user_choice != \"q\":\n",
        "    user_choice = input(\"Enter your snack choice (or 'q' to exit): \")\n",
        "\n",
        "    # Check if the user wants to quit\n",
        "    if user_choice == \"q\":\n",
        "        print(\"Thank you for using the vending machine.\")\n",
        "        break\n",
        "\n",
        "    # Dispense the selected snack\n",
        "    print(f\"Dispensing {user_choice}. Enjoy your snack!\")\n",
        "\n",
        "print(\"Vending machine session ended.\")\n"
      ],
      "metadata": {
        "id": "PdXh7pinp4ML"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "valid_login = \"admin\"\n",
        "valid_password = \"password\"\n",
        "\n",
        "while True:\n",
        "    login = input(\"Enter your login: \")\n",
        "    password = input(\"Enter your password: \")\n",
        "\n",
        "    if login == valid_login and password == valid_password:\n",
        "        print(\"Authentication successful!\")\n",
        "        break\n",
        "    else:\n",
        "        print(\"Invalid credentials. Please try again.\")\n",
        "        pass  # Placeholder for later (e.g., account lockout)\n",
        "\n",
        "print(\"Welcome, admin!\")\n"
      ],
      "metadata": {
        "id": "gROIJFCoqC5Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hHuAIV6rqD2r"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}